#+Title: Exercício 2.11
#+Author: Alexandre Rademaker

Código da seção, necessário para rodar e testar a solução do
exercício:

#+BEGIN_SRC scheme
#lang racket

(define (make-interval a b)
  (cons a b))

(define (upper-bound x)
  (cdr x))

(define (lower-bound x)
  (car x))

(define (mul-interval-old x y)
 (let ((p1 (* (lower-bound x) (lower-bound y)))
       (p2 (* (lower-bound x) (upper-bound y)))
       (p3 (* (upper-bound x) (lower-bound y)))
       (p4 (* (upper-bound x) (upper-bound y))))      
 (make-interval (min p1 p2 p3 p4)
                (max p1 p2 p3 p4))))
#+END_SRC

The suggestion is based on the result of multiplication of two numbers
with the same or opposite signs. For each interval there are three
possibilities, both signs are positive, both are negative, or the
signs are opposite. Note that an interval with the signs [+,-] is not
allowed, since the lower bound would be higher than the upper bound.

Since there are two intervals to check, that makes nine
possibilities. For most of the combinations, we can see directly which
pairs need to be multiplied to form the resulting interval. For
example, if all values are positive, then multiplying the two upper
bounds and two lower bounds are the only two products we need to
find. The only case where we need to do more than two multiplications
is in the case [-,+] and [-,+] since the product of the two lower
bounds could possibly be larger than the product of the two upper
bounds.

#+BEGIN_SRC scheme
(define (mul-interval x y) 
  (let ((xup (upper-bound x)) 
        (xlo (lower-bound x)) 
        (yup (upper-bound y)) 
        (ylo (lower-bound y))) 
    (case (map positive? (list xlo xup ylo yup))
      ('(#f #t #f #t)
       (make-interval (min (* xup ylo) (* xlo yup)) 
                      (max (* xlo ylo) (* xup yup))))
      ('(#t #t #t #t)
       (make-interval (* xlo ylo) (* xup yup)))
      ('(#t #t #f #t)
       (make-interval (* xup ylo) (* xup yup)))
      ('(#t #t #f #f)
       (make-interval (* xup ylo) (* xlo yup)))
      ('(#f #t #t #t)
       (make-interval (* xlo yup) (* xup yup)))
      ('(#f #t #f #f)
       (make-interval (* xup ylo) (* xlo ylo)))
      ('(#f #f #t #t)
       (make-interval (* xlo yup) (* xup ylo)))
      ('(#f #f #f #t)
       (make-interval (* xlo yup) (* xlo ylo)))
      ('(#f #f #f #f)
       (make-interval (* xup yup) (* xlo ylo))))))
#+END_SRC
