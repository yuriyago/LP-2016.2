#+Title: Exercício 2.63

* Enunciado

Each of the following two procedures converts a binary tree to a list.

#+BEGIN_SRC scheme
(define (tree->list-1 tree)
  (if (null? tree)
      '()
      (append (tree->list-1 (left-branch tree))
              (cons (entry tree)
                    (tree->list-1 (right-branch tree))))))

(define (tree->list-2 tree)
  (define (copy-to-list tree result-list)
    (if (null? tree)
        result-list
        (copy-to-list (left-branch tree)
                      (cons (entry tree)
                            (copy-to-list (right-branch tree)
                                          result-list)))))
  (copy-to-list tree '()))

#+END_SRC

Do the two procedures produce the same result for every tree? If not,
how do the results differ?  What lists do the two procedures produce
for the trees in figure 2.16?
 
* Solução

As duas funções produzem o mesmo resultado para todas as árvores. As
listas produzidas pelas árvores na figura 2.16 são:
 
- Esquerda :: ='(7 (3 (1 () ()) (5 () ())) (9 () (11 () ())))=
 
- Meio :: ='(3 (1 () ()) (7 (5 () ()) (9 (11 () ()) ())))=
 
- Direita :: ='(5 (3 (1 () ()) ()) (9 (11 () ()) (7 () ())))=
 
Que geram como resultado a lista ='(1 3 5 7 9 11)=. Abaixo seguem os
testes

#+BEGIN_EXAMPLE
(tree->list-1 '(7 (3 (1 () ()) (5 () ())) (9 () (11 () ()))))
'(1 3 5 7 9 11)
(tree->list-2 '(7 (3 (1 () ()) (5 () ())) (9 () (11 () ()))))
'(1 3 5 7 9 11)
(tree->list-1 '(3 (1 () ()) (7 (5 () ()) (9 (11 () ()) ()))))
'(1 3 5 7 11 9)
(tree->list-2 '(3 (1 () ()) (7 (5 () ()) (9 (11 () ()) ()))))
'(1 3 5 7 11 9)
(tree->list-1 '(5 (3 (1 () ()) ()) (9 (11 () ()) (7 () ()))))
'(1 3 5 11 9 7)
(tree->list-2 '(5 (3 (1 () ()) ()) (9 (11 () ()) (7 () ()))))
'(1 3 5 11 9 7)
#+END_EXAMPLE
