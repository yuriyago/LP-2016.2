#lang racket

(define (make-interval a b)
  (cons a b))

(define (upper-bound x)
  (cdr x))

(define (lower-bound x)
  (car x))

(define (mul-interval-old x y)
 (let ((p1 (* (lower-bound x) (lower-bound y)))
       (p2 (* (lower-bound x) (upper-bound y)))
       (p3 (* (upper-bound x) (lower-bound y)))
       (p4 (* (upper-bound x) (upper-bound y))))      
 (make-interval (min p1 p2 p3 p4)
                (max p1 p2 p3 p4))))

(define (mul-interval x y) 
  (let ((xup (upper-bound x)) 
        (xlo (lower-bound x)) 
        (yup (upper-bound y)) 
        (ylo (lower-bound y))) 
    (case (map positive? (list xlo xup ylo yup))
      ('(#f #t #f #t)
       (make-interval (min (* xup ylo) (* xlo yup)) 
                      (max (* xlo ylo) (* xup yup))))
      ('(#t #t #t #t)
       (make-interval (* xlo ylo) (* xup yup)))
      ('(#t #t #f #t)
       (make-interval (* xup ylo) (* xup yup)))
      ('(#t #t #f #f)
       (make-interval (* xup ylo) (* xlo yup)))
      ('(#f #t #t #t)
       (make-interval (* xlo yup) (* xup yup)))
      ('(#f #t #f #f)
       (make-interval (* xup ylo) (* xlo ylo)))
      ('(#f #f #t #t)
       (make-interval (* xlo yup) (* xup ylo)))
      ('(#f #f #f #t)
       (make-interval (* xlo yup) (* xlo ylo)))
      ('(#f #f #f #f)
       (make-interval (* xup yup) (* xlo ylo))))))

