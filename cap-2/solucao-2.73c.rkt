#lang racket

(define (install-expo-package)
  (define (expo-deriv expr var)
    (make-product (expo expr)
                  (make-product (make-exponetiation (base expr)
                                                    (make-sum (expo expr) -1))
                                (deriv (base expr) var))))
  (define (expo expr)
    (cadr expr))
  
  (define (base expr)
    (car expr))
  
  (define (make-exponetiation base expo)
    (cond((=number? expo 0)1)
         ((=number? expo 1) base)
         ((=number? base 1)1)
         (else (list '** base expo))))
  
  (put 'deriv '** expo-deriv))



;Dados na quest√£o 2.73-b)
(define (install-sum-package) 
  (define (sum-deriv expr var) 
    (make-sum (deriv (addend expr) var) 
              (deriv (augend expr) var))) 
  (define (addend expr) (car expr)) 
  (define (augend expr) (cadr expr))
  (define (make-sum a b) 
    (cond ((and (number? a) (number? b)) (+ a b)) 
          ((=number? a 0) b) 
          ((=number? b 0) a) 
          (else (list '+ a b))))
  (put 'deriv '+ sum-deriv))

(define (install-mult-package)
  (define (multiplier expr) (car expr)) 
  (define (multiplicand expr) (cadr expr))
  (define (mul-deriv expr var) 
    (make-sum (make-product (multiplier expr) 
                            (deriv (multiplicand expr) var)) 
              (make-product (multiplicand expr) 
                            (deriv (multiplier expr) var)))) 
  (define (multiplier expr) (car expr)) 
  (define (multiplicand expr) (cadr expr)) 
  (define (make-product a b) 
    (cond ((and (number? a) (number? b)) (* a b)) 
          ((=number? a 1) b) 
          ((=number? b 1) a) 
          ((or (=number? a 0) (=number? b 0)) 0) 
          (else (list '* a b)))) 
  (put 'deriv '* mul-deriv))

;Dado na questao.
(define (deriv exp var)
  (cond ((number? exp) 0)
        ((variable? exp) (if (same-variable? exp var) 1 0))
        (else ((get 'deriv (operator exp)) (operands exp)
                                           var))))
(define (operator exp) (car exp))
(define (operands exp) (cdr exp))