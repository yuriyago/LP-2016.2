#lang racket

(define english-1
  '((Initial (1))
    (Final (11 22))
    (From 1 to 12 by BV)
    (From 1 to 3 by NP)
    (From 1 to 2 by DET)
    (From 2 to 3 by N)
    (From 3 to 4 by BV)
    (From 4 to 5 by ADV)
    (From 4 to 5 by |#|)
    (From 5 to 6 by DET)
    (From 5 to 7 by DET)
    (From 5 to 8 by |#|)
    (From 6 to 7 by ADJ)    
    (From 6 to 9 by MOD)
    (From 7 to 11 by N)
    (From 8 to 10 by MOD)
    (From 8 to 11 by ADJ)
    (From 9 to 7 by ADJ)
    (From 10 to 11 by ADV)
    (From 11 to 1 by CNJ)
    (From 11 to 4 by CNJ)
    (From 12 to 14 by NP)
    (From 12 to 13 by DET)
    (From 13 to 14 by N)
    (From 14 to 15 by ADV)
    (From 14 to 15 by |#|)
    (From 15 to 16 by DET)
    (From 15 to 17 by DET)
    (From 15 to 18 by |#|)
    (From 16 to 17 by ADJ)
    (From 16 to 19 by MOD)
    (From 17 to 21 by N)
    (From 18 to 20 by MOD)
    (From 18 to 21 by ADJ)
    (From 19 to 17 by ADJ)
    (From 20 to 21 by ADV)
    (From 21 to 22 by PT)))

(define (initial-nodes network)
  (cadr (assoc 'Initial network)))

(define (final-nodes network)
  (cadr (assoc 'Final network)))

(define (transitions network)
  (cddr network))

(define (trans-node transition)
  (cadr transition))

(define (trans-newnode transition)
  (cadddr transition))

(define (trans-label transition)
  (last transition))

(define abbreviations
  '((NP kim sandy lee matheus henrique)
    (DET a the her)
    (N consumer man woman assassin)
    (BV is was)
    (CNJ and or)
    (ADJ happy stupid silly)
    (MOD very)
    (ADV often always sometimes)
    (PT ?)))

(define (recognize network tape)
  (with-handlers ([symbol? (lambda (s) s)]
                  (empty? (lambda (s) #f)))
    (for ((initialnode (initial-nodes network)))
      (recognize-next initialnode tape network))))

(define (recognize-next node tape network)
  (if (empty? tape)
      (if (member node (final-nodes network))
          (raise 'ok #t)
          (raise 'failed #f))
      (for ((transition (transitions network)))
        (if (eq? node (trans-node transition))
            (for ((newtape (recognize-move (trans-label transition) tape)))
              (recognize-next (trans-newnode transition) newtape network))
            false))))

(define (recognize-move label tape)
  (if (or (eq? label (car tape))
          (member (car tape) (assoc label abbreviations)))
      (list (cdr tape))
      (if (eq? label '|#|)
          (list tape)
          null)))

(define (generate-move label tape)
 (cdr (assoc label abbreviations)))

(define (generate-next node tape network)
  (if (or (member node (final-nodes network)) (> (length tape) 7))
      (begin (display tape)
      (newline))
      (for ((transition (transitions network)))
       (if (eq? node (trans-node transition))
            (for ((newtapes (generate-move (trans-label transition) tape)))
              (generate-next  (trans-newnode transition)
                              (append tape (list newtapes)) network))
            false))))

(define (generate network)
  (for ((initialnode (initial-nodes network)))
    (generate-next initialnode empty network)))