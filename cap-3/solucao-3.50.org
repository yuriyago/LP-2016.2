#+Title: Exercício 3.50
#+Author: Alifer Sales

 Complete the following definition, which generalizes stream-map to allow procedures that take multiple arguments, analogous to map in section 2.2.3, footnote 12.
 
 #+BEGIN_SRC scheme
  #lang racket
  
  (define (stream-map proc . argstreams)
    (if (<??> (car argstreams))
        the-empty-stream
        (<??>
        (apply proc (map <??> argstreams))
        (apply stream-map
               (cons proc (map <??> argstreams))))))
#+END_SRC

** Resolução

*** Footnote 12 in section 2.2.3
Scheme standardly provides a map procedure that is more general than the one described here. This more general map takes a procedure of n arguments, together with n lists, and applies the procedure to all the first elements of the lists, all the second elements of the lists, and so on, returning a list of the results.

*** Exercise 3.50

#+BEGIN_SRC scheme
  #lang racket
  
  (define (stream-map proc . argstreams)
    (if (stream-null? (car argstreams))
        the-empty-stream
        (cons-stream
        (apply proc (map stream-car argstreams))
        (apply stream-map
                (cons proc (map stream-cdr argstreams))))))
#+END_SRC

*** Stream package

#+BEGIN_SRC scheme
  #lang racket
  
  ;; Constructor
  (define-syntax cons-stream
      (syntax-rules ()
        ((cons-stream head tail)
         (cons head (delay tail)))))

  ;; Selectors
  (define (stream-car s)
    (car s))

  (define (stream-cdr s)
    (force (cdr s)))

  ;; Auxiliar functions
  (define (stream-null? s)
    (eq? s the-empty-stream))

  (define the-empty-stream '())

  (define (display-stream s)
    (stream-for-each displayln s))

  (define (stream-for-each proc s)
    (if (stream-null? s)
        'done
        (begin (proc (stream-car s))
               (stream-for-each proc (stream-cdr s)))))
#+END_SRC                
